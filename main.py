import asyncio
import logging
import os
import re
import base64
from urllib.parse import quote
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
import io
from PIL import Image
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes, MessageHandler, filters
import google.generativeai as genai
from dotenv import load_dotenv
import time

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()

bot_token = os.getenv("BOT_KEY")

WEB_APP_URL = "https://doflare123.github.io/GeminiBot/"

API_KEYS = [
    os.getenv("GEMINI_API_KEY_1"),
    os.getenv("GEMINI_API_KEY_2"),
    os.getenv("GEMINI_API_KEY_3"),
    os.getenv("GEMINI_API_KEY_4"),
    os.getenv("GEMINI_API_KEY_5"),
    os.getenv("GEMINI_API_KEY_6"),
]

API_KEYS = [key for key in API_KEYS if key is not None]

if not API_KEYS:
    raise ValueError("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ API –∫–ª—é—á–∞!")

class GeminiAPIManager:
    def __init__(self, api_keys):
        self.api_keys = api_keys
        self.current_key_index = 0
        self.key_status = {i: {'active': True, 'last_error_time': 0} for i in range(len(api_keys))}
        self.model = None
        self.setup_current_model()
    
    def setup_current_model(self):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–¥–µ–ª—å —Å —Ç–µ–∫—É—â–∏–º –∞–∫—Ç–∏–≤–Ω—ã–º –∫–ª—é—á–æ–º"""
        if self.current_key_index < len(self.api_keys):
            genai.configure(api_key=self.api_keys[self.current_key_index])
            self.model = genai.GenerativeModel('gemini-2.5-flash')
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è API –∫–ª—é—á #{self.current_key_index + 1}")
    
    def switch_to_next_key(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∫–ª—é—á"""
        original_index = self.current_key_index
        attempts = 0
        
        while attempts < len(self.api_keys):
            self.current_key_index = (self.current_key_index + 1) % len(self.api_keys)
            attempts += 1
            
            key_info = self.key_status[self.current_key_index]
            current_time = time.time()
            
            if not key_info['active'] and (current_time - key_info['last_error_time']) < 3600:
                continue
            
            if not key_info['active'] and (current_time - key_info['last_error_time']) >= 3600:
                key_info['active'] = True
            
            if key_info['active']:
                self.setup_current_model()
                logging.info(f"–ü–µ—Ä–µ–∫–ª—é—á–∏–ª–∏—Å—å –Ω–∞ API –∫–ª—é—á #{self.current_key_index + 1}")
                return True
        
        logging.error("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã –∏–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã!")
        return False
    
    def mark_current_key_as_exhausted(self):
        """–ü–æ–º–µ—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π –∫–ª—é—á –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π"""
        self.key_status[self.current_key_index]['active'] = False
        self.key_status[self.current_key_index]['last_error_time'] = time.time()
        logging.warning(f"API –∫–ª—é—á #{self.current_key_index + 1} –ø–æ–º–µ—á–µ–Ω –∫–∞–∫ –∏—Å—á–µ—Ä–ø–∞–Ω–Ω—ã–π")
    
    def is_quota_error(self, error):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–Ω–æ–π —Å –∏—Å—á–µ—Ä–ø–∞–Ω–∏–µ–º –∫–≤–æ—Ç—ã"""
        error_str = str(error).lower()
        quota_indicators = [
            'quota exceeded',
            'rate limit',
            'too many requests',
            'resource_exhausted',
            'quota_exceeded',
            'limit exceeded'
        ]
        return any(indicator in error_str for indicator in quota_indicators)
    
    async def generate_content_with_rotation(self, content):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ç–µ–Ω—Ç —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–æ—Ç–∞—Ü–∏–µ–π –∫–ª—é—á–µ–π –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö –∫–≤–æ—Ç—ã"""
        max_attempts = len(self.api_keys)
        
        for attempt in range(max_attempts):
            try:
                if self.model is None:
                    raise Exception("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö API –∫–ª—é—á–µ–π")
                
                response = await self.model.generate_content_async(content)
                return response
                
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ —Å –∫–ª—é—á–æ–º #{self.current_key_index + 1}: {e}")
                
                if self.is_quota_error(e):
                    self.mark_current_key_as_exhausted()
                    
                    if attempt < max_attempts - 1:  # –ù–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        if self.switch_to_next_key():
                            logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —Å –Ω–æ–≤—ã–º –∫–ª—é—á–æ–º (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 2})")
                            continue
                        else:
                            raise Exception("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                    else:
                        raise Exception("–í—Å–µ API –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                else:
                    raise e
        
        raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –Ω–∏ —Å –æ–¥–Ω–∏–º –∫–ª—é—á–æ–º")

api_manager = GeminiAPIManager(API_KEYS)

def escape_markdown_v2(text: str) -> str:
    """
    –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è MarkdownV2.
    –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —Å–∏–º–≤–æ–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –¥–æ–ª–∂–Ω—ã –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∫ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ.
    """
    code_blocks = []
    
    def replace_code_block(match):
        code_blocks.append(match.group(0))
        return f"__CODE_BLOCK_{len(code_blocks)-1}__"
    
    text = re.sub(r'```.*?```', replace_code_block, text, flags=re.DOTALL)
    
    inline_codes = []
    def replace_inline_code(match):
        inline_codes.append(match.group(0))
        return f"__INLINE_CODE_{len(inline_codes)-1}__"
    
    text = re.sub(r'`[^`]+`', replace_inline_code, text)
    
    chars_to_escape = ['\\', '[', ']', '(', ')', '~', '>', '#', '+', '-', '=', '|', '{', '}', '.', '!']
    
    for char in chars_to_escape:
        text = text.replace(char, '\\' + char)
    
    for i, code_block in enumerate(code_blocks):
        text = text.replace(f"__CODE_BLOCK_{i}__", code_block)
    
    for i, inline_code in enumerate(inline_codes):
        text = text.replace(f"__INLINE_CODE_{i}__", inline_code)
    
    return text

def create_web_app_url(text: str) -> str:
    """–°–æ–∑–¥–∞–µ—Ç URL –¥–ª—è Web App —Å –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º"""
    # –ö–æ–¥–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –≤ base64 –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —á–µ—Ä–µ–∑ URL
    encoded_text = base64.b64encode(text.encode('utf-8')).decode('utf-8')
    return f"{WEB_APP_URL}?data={quote(encoded_text)}"

def should_use_webapp(text: str) -> bool:
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Web App –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
    return len(text) > 2500

async def send_response(context: ContextTypes.DEFAULT_TYPE, chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏—Å–ø–æ–ª—å–∑—É—è Web App –¥–ª—è –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    if should_use_webapp(text):
        # –°–æ–∑–¥–∞–µ–º –∫—Ä–∞—Ç–∫–æ–µ –ø—Ä–µ–≤—å—é –æ—Ç–≤–µ—Ç–∞
        preview = text[:500] + "..." if len(text) > 500 else text
        escaped_preview = escape_markdown_v2(preview)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Web App
        webapp_url = create_web_app_url(text)
        keyboard = InlineKeyboardMarkup([
            [InlineKeyboardButton(
                "üìñ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç–≤–µ—Ç", 
                web_app=WebAppInfo(url=webapp_url)
            )]
        ])
        
        await context.bot.send_message(
            chat_id=chat_id,
            text=f"*–û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω\\!*\n\n{escaped_preview}\n\n_–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ\\. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞\\._",
            parse_mode="MarkdownV2",
            reply_markup=keyboard
        )
    else:
        # –û–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è –∫–æ—Ä–æ—Ç–∫–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        max_message_length = 4000
        
        if len(text) > max_message_length:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏
            chunks = []
            for i in range(0, len(text), max_message_length):
                chunks.append(text[i:i + max_message_length])
            
            for i, chunk in enumerate(chunks):
                escaped_chunk = escape_markdown_v2(chunk)
                await context.bot.send_message(chat_id=chat_id, text=escaped_chunk, parse_mode="MarkdownV2")
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–æ–π —á–∞—Å—Ç–µ–π
                if i < len(chunks) - 1:
                    await asyncio.sleep(0.5)
        else:
            escaped_text = escape_markdown_v2(text)
            await context.bot.send_message(chat_id=chat_id, text=escaped_text, parse_mode="MarkdownV2")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –ø–µ—Ä–µ—à–ª—é –µ–≥–æ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ Gemini.\n\n"
             "üì± –î–ª—è –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ (–±–æ–ª–µ–µ 2500 —Å–∏–º–≤–æ–ª–æ–≤) —è –±—É–¥—É –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å —É–¥–æ–±–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —á–µ—Ä–µ–∑ Web App."
    )

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_message = update.message.text
    chat_id = update.effective_chat.id
    
    messageBot = await context.bot.send_message(chat_id=chat_id, text="–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∑–∞–ø—Ä–æ—Å...")
    
    try:
        logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {chat_id}: {user_message}")
        
        response = await api_manager.generate_content_with_rotation(user_message)
        full_text = response.text
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–µ—à–∏—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Web App)
        await send_response(context, chat_id, full_text)
        
        await context.bot.delete_message(chat_id=chat_id, message_id=messageBot.message_id)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        await context.bot.delete_message(chat_id=chat_id, message_id=messageBot.message_id)
        
        if "–≤—Å–µ api –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã" in str(e).lower():
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö API –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å."
            )
        else:
            await context.bot.send_message(
                chat_id=chat_id, 
                text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Gemini: {e}"
            )

async def handle_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    prompt = update.message.caption or "–û–ø–∏—à–∏ —ç—Ç–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ."
    
    messageBot = await context.bot.send_message(chat_id=chat_id, text="–ü–æ–ª—É—á–∏–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é...")

    try:
        photo_file = await update.message.photo[-1].get_file()
        photo_bytes = await photo_file.download_as_bytearray()
        img = Image.open(io.BytesIO(photo_bytes))
        
        response = await api_manager.generate_content_with_rotation([prompt, img])
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç (—Ñ—É–Ω–∫—Ü–∏—è —Å–∞–º–∞ —Ä–µ—à–∏—Ç, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ Web App)
        await send_response(context, chat_id, response.text)
        
        await context.bot.delete_message(chat_id=chat_id, message_id=messageBot.message_id)
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ç {chat_id}: {e}")
        await context.bot.delete_message(chat_id=chat_id, message_id=messageBot.message_id)
        
        if "–≤—Å–µ api –∫–ª—é—á–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã" in str(e).lower():
            await context.bot.send_message(
                chat_id=chat_id, 
                text="‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã –≤—Å–µ—Ö API –∫–ª—é—á–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —á–∞—Å."
            )
        else:
            await context.bot.send_message(chat_id=chat_id, text=f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

if __name__ == '__main__':
    application = ApplicationBuilder().token(bot_token).build()
    
    start_handler = CommandHandler('start', start)
    application.add_handler(start_handler)
    
    message_handler = MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message)
    application.add_handler(message_handler)
    application.add_handler(MessageHandler(filters.PHOTO, handle_image))
    
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω —Å {len(API_KEYS)} API –∫–ª—é—á–∞–º–∏...")
    print(f"Web App URL: {WEB_APP_URL}")
    application.run_polling()
